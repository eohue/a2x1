---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  - Public Site·Resident Portal·Admin Portal을 하나의 모노레포(Frontend/Backend 분리)로 통합 구축한다.  
  - CSR/SSR 하이브리드(Next.js 14) 및 NestJS 기반 BFF 구조를 채택하여 UX·SEO·성능을 모두 충족한다.
- **핵심 기술 스택**  
  - Frontend: Next.js 14, React 18, TypeScript, Tailwind CSS, Shadcn UI, Zustand  
  - Backend: Node.js 20, NestJS 10, PostgreSQL 15, Redis 7, Socket.io, TypeORM  
  - Infra: AWS EKS, RDS, S3, CloudFront, Terraform IaC, GitHub Actions CI/CD
- **주요 기술 목표**  
  - LCP ≤ 2.5 s, P95 API ≤ 500 ms, 서버 가동률 99.9%  
  - Kubernetes HPA로 트래픽 3배 급등 시 5분 내 자동 확장  
  - 역할 기반 접근제어(RBAC)·AES256 암호화·OWASP Top10 대비
- **핵심 가정**  
  - 예상 동시접속 2k, 월 UV 100k 기준으로 초기 인프라 설계  
  - 멀티테넌트 주택 단지 추가를 위한 하드·소프트 파티셔닝 병행  
  - SaaS형 외부 서비스(FCM, Instagram API, NICEPay)의 가용성 99% 이상

## 2. Technology Stack Architecture
### Frontend Technology Stack
| 영역 | 선택 기술 | 비고 |
|------|----------|------|
| Core Framework | Next.js 14 (App Router) | ISR + SSG + SSR 혼합 |
| State Management | Zustand + React Context | RTK 미사용, 경량 관리 |
| Routing & Navigation | Next.js 내장 Router | 동적 세그먼트·국제화(i18n) |
| UI/UX Framework | Tailwind CSS + Shadcn UI + Lucide Icons | 디자인 시스템 기반 |
| Build Tools | Vite 불사용, Next.js 내장 Turbopack | ESLint, Prettier, Husky |

### Backend Technology Stack
| 영역 | 선택 기술 | 비고 |
|------|----------|------|
| Runtime | Node.js 20 (LTS) | ES Module |
| Web Framework | NestJS 10 (Express Adapter) | DI·모듈화 |
| API Design | REST + WebSocket | Swagger(OpenAPI) 자동화 |
| Data Validation | class-validator + Zod | DTO 검증 일원화 |
| Middleware | Helmet, RateLimiter, morgan | 로깅·보안·트래픽 제어 |

### Database & Persistence Layer
| 항목 | 내용 |
|------|------|
| Primary DB | PostgreSQL 15 (AWS RDS) |
| Schema Design | 3NF 준수, 멀티테넌트용 tenant_id 파티션 |
| Caching | Redis 7 (AWS ElastiCache) — 세션·열람수·퀴즈 |
| Migration | TypeORM Migration CLI, GitOps 관리 |
| Backup & Recovery | RDS 자동 스냅샷(30일) + 월간 S3 Glacier |

### Infrastructure & DevOps
| 항목 | 내용 |
|------|------|
| Hosting | AWS EKS(Fargate) + ALB + CloudFront |
| Containerization | Dockerfile(Multi-Stage) + Helm 차트 |
| CI/CD | GitHub Actions → ECR → Argo Rollouts(Blue/Green) |
| Monitoring | Prometheus + Grafana + Loki, Sentry |
| Logging | Fluent Bit → OpenSearch(ELK 호환) |

## 3. System Architecture Design
### Top-Level Building Blocks
- Frontend Web  
  - Public Site, Resident Portal, Admin UI  
- API Gateway / BFF  
  - NestJS 앱, REST & WebSocket, Auth, Rate Limiting  
- Core Microservices  
  - User, Community, Project, Application, Reporting  
- Data Stores  
  - PostgreSQL, Redis, S3(파일), CloudFront(CDN)  
- External Integrations  
  - Firebase FCM, Instagram Graph API, Kakao Share, NICEPay  
- DevOps & Observability  
  - GitHub Actions, ArgoCD, Prometheus, Grafana, Loki

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    FE[Next.js Frontend] -->|HTTPS| BFF[NestJS API Gateway]
    BFF -->|gRPC/REST| MS[(Microservices)]
    MS -->|SQL| DB[(PostgreSQL)]
    MS -->|Cache| REDIS[(Redis)]
    BFF -->|WebSocket| FE
    BFF -->|REST| EXT[External APIs]
```
- FE는 CSR/SSR 요청을 BFF로 전달하며 SEO 페이지는 SSR로 렌더링  
- BFF는 인증·권한 체크 후 마이크로서비스에 요청 프록시  
- 마이크로서비스는 PostgreSQL 및 Redis와 상호작용, 이벤트를 WebSocket으로 Push  
- 외부 API(Instagram, FCM 등)는 BFF를 통해 호출·토큰 관리

### Code Organization & Convention
#### Domain-Driven Organization Strategy
- Bounded Context: user, house, community, application, report  
- Layer 분리: controller → service → repository → entity  
- Feature-based 모듈: `apps/community`, `apps/application`  
- Shared: `libs/common`, `libs/types`, `libs/utils`

#### Universal File & Folder Structure
```
/repo-root
├── apps/
│   ├── frontend/          # Next.js
│   │   ├── app/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── lib/
│   │   └── styles/
│   └── api-gateway/       # NestJS BFF
│       ├── src/
│       │   ├── modules/
│       │   │   ├── user/
│       │   │   ├── community/
│       │   │   └── project/
│       │   ├── common/
│       │   └── main.ts
│       └── test/
├── services/
│   ├── user-service/
│   ├── community-service/
│   └── report-service/
├── libs/
│   ├── common/
│   ├── types/
│   └── config/
├── infra/
│   ├── helm/
│   ├── terraform/
│   └── scripts/
└── docs/
```

### Data Flow & Communication Patterns
- 클라이언트 ⇄ BFF: JSON REST, 인증(OAuth2 + JWT), 429 처리  
- BFF ⇄ Microservices: gRPC(내부) + Event Bridge(비동기)  
- Microservices ⇄ DB: TypeORM Connection Pool(50)  
- 실시간 피드: Socket.io 네임스페이스 `/feed`, Redis Pub/Sub  
- 외부 API: Circuit Breaker + Exponential Backoff

## 4. Performance & Optimization Strategy
- Critical CSS & 코드 스플리팅, 이미지 최적화(Next Image, AVIF)  
- Redis 캐시·CDN 캐싱·Edge ISR로 TTFB 최소화  
- Slow Query Log & PgBouncer로 DB 병목 제거  
- Lighthouse·k6·Grafana RUM으로 지속적 성능 모니터링

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (M+2)
- Core Infrastructure: EKS, CI/CD 파이프라인, 기본 Helm  
- Essential Features: Public Site MVP, Resident 로그인/피드, Admin 회원 승인  
- Basic Security: OAuth2, JWT, HTTPS, Helmet  
- Dev Setup: 모노레포, Lint/Prettier, Storybook  
- Timeline: 착수 후 2개월

### Phase 2: Feature Enhancement (M+4)
- Living Guide, 이벤트·투표, 인스타 연동, 푸시 알림  
- Performance: Redis 도입, 퍼포먼스 튜닝 1차  
- Enhanced Security: Rate Limiter, 2FA(Clerk)  
- Monitoring: Prometheus·Grafana·Sentry 배포  
- Timeline: 착수 후 4개월

### Phase 3: Scaling & Optimization (M+6)
- 멀티테넌트 구조 전환, 리포트 자동화, 권한 세분화  
- Kubernetes HPA·VPA, Read Replica, DB 샤딩 POC  
- PG·외부 회계 API 통합, 개인화 추천 AI SDK  
- SOC2 대응 로깅·감사 추적 구축  
- Timeline: 착수 후 6개월

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
| 위험 | 설명 | 대응책 |
|------|------|-------|
| Instagram API 변경 | Graph API 버전업·권한 제한 | RSS 백업·스크레이핑 fallback, 기능 토글 |
| 실시간 피드 부하 | Socket.io 스케일 시 세션 문제 | Sticky Session 없는 Redis Adapter 사용 |
| 데이터 유출 | PII 저장·전송 | AES256 at-rest, TLS1.3, 정기 Pen-Test |
| DB 스케일 한계 | 멀티테넌트 확대 시 I/O 증가 | Read Replica, 파티셔닝, CQRS 도입 |

### Project Delivery Risks
| 위험 | 설명 | 대응책 |
|------|------|-------|
| 일정 지연 | 의존 모듈 복잡성 | 2주 스프린트, 버퍼 10%, MVP 우선순위 |
| 리소스 부족 | NestJS 경험 부족 인력 | 사내 Tech-Workshop, 코드 템플릿 제공 |
| 품질 저하 | 테스트 커버리지 미흡 | Jest E2E, Playwright UI 테스트, SonarCloud |
| 배포 장애 | Blue/Green 실패 | Argo Rollback, DB 마이그레이션 version lock |

## 끝
